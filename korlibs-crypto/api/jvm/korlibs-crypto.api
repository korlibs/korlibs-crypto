public final class korlibs/crypto/AES : korlibs/crypto/Cipher {
	public static final field Companion Lkorlibs/crypto/AES$Companion;
	public fun <init> ([B)V
	public fun <init> ([I)V
	public fun decrypt ([BII)V
	public final fun decryptBlock ([BI)V
	public fun encrypt ([BII)V
	public final fun encryptBlock ([BI)V
	public fun getBlockSize ()I
	public final fun getKeyWords ()[I
}

public final class korlibs/crypto/AES$Companion {
	public final fun decryptAesCbc ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun decryptAesCfb ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun decryptAesCtr ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun decryptAesEcb ([B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun decryptAesOfb ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun decryptAesPcbc ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun encryptAesCbc ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun encryptAesCfb ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun encryptAesCtr ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun encryptAesEcb ([B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun encryptAesOfb ([B[B[BLkorlibs/crypto/CipherPadding;)[B
	public final fun encryptAesPcbc ([B[B[BLkorlibs/crypto/CipherPadding;)[B
}

public abstract interface class korlibs/crypto/Cipher {
	public abstract fun decrypt ([BII)V
	public abstract fun encrypt ([BII)V
	public abstract fun getBlockSize ()I
}

public final class korlibs/crypto/Cipher$DefaultImpls {
	public static synthetic fun decrypt$default (Lkorlibs/crypto/Cipher;[BIIILjava/lang/Object;)V
	public static synthetic fun encrypt$default (Lkorlibs/crypto/Cipher;[BIIILjava/lang/Object;)V
}

public final class korlibs/crypto/CipherKt {
	public static final fun get (Lkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherMode;Lkorlibs/crypto/CipherPadding;[B)Lkorlibs/crypto/CipherWithModeAndPadding;
	public static synthetic fun get$default (Lkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherMode;Lkorlibs/crypto/CipherPadding;[BILjava/lang/Object;)Lkorlibs/crypto/CipherWithModeAndPadding;
	public static final fun with (Lkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherMode;Lkorlibs/crypto/CipherPadding;[B)Lkorlibs/crypto/CipherWithModeAndPadding;
	public static synthetic fun with$default (Lkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherMode;Lkorlibs/crypto/CipherPadding;[BILjava/lang/Object;)Lkorlibs/crypto/CipherWithModeAndPadding;
}

public abstract interface class korlibs/crypto/CipherMode {
	public static final field Companion Lkorlibs/crypto/CipherMode$Companion;
	public abstract fun decrypt ([BLkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherPadding;[B)[B
	public abstract fun encrypt ([BLkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherPadding;[B)[B
	public abstract fun getName ()Ljava/lang/String;
}

public final class korlibs/crypto/CipherMode$Companion {
	public final fun getCBC ()Lkorlibs/crypto/CipherMode;
	public final fun getCFB ()Lkorlibs/crypto/CipherMode;
	public final fun getCTR ()Lkorlibs/crypto/CipherMode;
	public final fun getECB ()Lkorlibs/crypto/CipherMode;
	public final fun getOFB ()Lkorlibs/crypto/CipherMode;
	public final fun getPCBC ()Lkorlibs/crypto/CipherMode;
}

public final class korlibs/crypto/CipherModeKt {
	public static final fun decryptSafe (Lkorlibs/crypto/CipherMode;[BLkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherPadding;[B)[B
	public static final fun encryptSafe (Lkorlibs/crypto/CipherMode;[BLkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherPadding;[B)[B
}

public abstract class korlibs/crypto/CipherPadding {
	public static final field Companion Lkorlibs/crypto/CipherPadding$Companion;
	public fun <init> ()V
	public final fun add ([BI)[B
	protected fun addInternal ([BII)V
	protected fun paddingSize (II)I
	public final fun remove ([B)[B
	protected fun removeInternal ([B)I
}

public final class korlibs/crypto/CipherPadding$Companion {
	public final fun getANSIX923Padding ()Lkorlibs/crypto/CipherPadding;
	public final fun getISO10126Padding ()Lkorlibs/crypto/CipherPadding;
	public final fun getNoPadding ()Lkorlibs/crypto/CipherPadding;
	public final fun getPKCS7Padding ()Lkorlibs/crypto/CipherPadding;
	public final fun getZeroPadding ()Lkorlibs/crypto/CipherPadding;
	public final fun padding ([BILkorlibs/crypto/CipherPadding;)[B
	public final fun removePadding ([BLkorlibs/crypto/CipherPadding;)[B
}

public final class korlibs/crypto/CipherWithModeAndPadding {
	public fun <init> (Lkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherMode;Lkorlibs/crypto/CipherPadding;[B)V
	public synthetic fun <init> (Lkorlibs/crypto/Cipher;Lkorlibs/crypto/CipherMode;Lkorlibs/crypto/CipherPadding;[BILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun decrypt ([BII)[B
	public static synthetic fun decrypt$default (Lkorlibs/crypto/CipherWithModeAndPadding;[BIIILjava/lang/Object;)[B
	public final fun encrypt ([BII)[B
	public static synthetic fun encrypt$default (Lkorlibs/crypto/CipherWithModeAndPadding;[BIIILjava/lang/Object;)[B
	public final fun getCipher ()Lkorlibs/crypto/Cipher;
	public final fun getIv ()[B
	public final fun getMode ()Lkorlibs/crypto/CipherMode;
	public final fun getPadding ()Lkorlibs/crypto/CipherPadding;
}

public final class korlibs/crypto/HMAC {
	public static final field Companion Lkorlibs/crypto/HMAC$Companion;
	public fun <init> ()V
}

public final class korlibs/crypto/HMAC$Companion {
	public final fun hmacMD5 ([B[B)Lkorlibs/crypto/Hash;
	public final fun hmacSHA1 ([B[B)Lkorlibs/crypto/Hash;
	public final fun hmacSHA256 ([B[B)Lkorlibs/crypto/Hash;
	public final fun hmacSHA512 ([B[B)Lkorlibs/crypto/Hash;
}

public final class korlibs/crypto/Hash {
	public static final field Companion Lkorlibs/crypto/Hash$Companion;
	public fun <init> ([B)V
	public fun equals (Ljava/lang/Object;)Z
	public final fun getBase64 ()Ljava/lang/String;
	public final fun getBase64Url ()Ljava/lang/String;
	public final fun getBytes ()[B
	public final fun getHex ()Ljava/lang/String;
	public final fun getHexLower ()Ljava/lang/String;
	public final fun getHexUpper ()Ljava/lang/String;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class korlibs/crypto/Hash$Companion {
	public final fun fromBase64 (Ljava/lang/String;)Lkorlibs/crypto/Hash;
	public final fun fromHex (Ljava/lang/String;)Lkorlibs/crypto/Hash;
}

public abstract class korlibs/crypto/Hasher {
	public fun <init> (IILjava/lang/String;)V
	protected abstract fun coreDigest ([B)V
	protected abstract fun corePadding (J)[B
	protected abstract fun coreReset ()V
	protected abstract fun coreUpdate ([B)V
	public final fun digest ()Lkorlibs/crypto/Hash;
	public fun digestOut ([B)V
	public final fun getBlockSize ()I
	public final fun getChunkSize ()I
	public final fun getDigestSize ()I
	public final fun getName ()Ljava/lang/String;
	protected final fun getTotalWritten ()J
	public fun reset ()Lkorlibs/crypto/Hasher;
	protected final fun setTotalWritten (J)V
	public fun toString ()Ljava/lang/String;
	public final fun update ([B)Lkorlibs/crypto/Hasher;
	public fun update ([BII)Lkorlibs/crypto/Hasher;
}

public class korlibs/crypto/HasherFactory {
	public fun <init> (Ljava/lang/String;Lkotlin/jvm/functions/Function0;)V
	public final fun digest ([B)Lkorlibs/crypto/Hash;
	public final fun digest ([BLkotlin/jvm/functions/Function1;)Lkorlibs/crypto/Hash;
	public static synthetic fun digest$default (Lkorlibs/crypto/HasherFactory;[BLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkorlibs/crypto/Hash;
	public final fun getCreate ()Lkotlin/jvm/functions/Function0;
	public final fun getName ()Ljava/lang/String;
	public final fun invoke ()Lkorlibs/crypto/Hasher;
	public fun toString ()Ljava/lang/String;
}

public final class korlibs/crypto/HasherKt {
	public static final fun hash ([BLkorlibs/crypto/HasherFactory;)Lkorlibs/crypto/Hash;
}

public final class korlibs/crypto/MD4 : korlibs/crypto/Hasher {
	public static final field Companion Lkorlibs/crypto/MD4$Companion;
	public fun <init> ()V
}

public final class korlibs/crypto/MD4$Companion : korlibs/crypto/HasherFactory {
}

public final class korlibs/crypto/MD4Kt {
	public static final fun md4 ([B)Lkorlibs/crypto/Hash;
}

public final class korlibs/crypto/MD5 : korlibs/crypto/Hasher {
	public static final field Companion Lkorlibs/crypto/MD5$Companion;
	public fun <init> ()V
}

public final class korlibs/crypto/MD5$Companion : korlibs/crypto/HasherFactory {
}

public final class korlibs/crypto/MD5Kt {
	public static final fun md5 ([B)Lkorlibs/crypto/Hash;
}

public abstract class korlibs/crypto/NonCoreHasher : korlibs/crypto/Hasher {
	public fun <init> (IILjava/lang/String;)V
	protected fun coreDigest ([B)Ljava/lang/Void;
	public synthetic fun coreDigest ([B)V
	protected fun corePadding (J)[B
	protected fun coreReset ()Ljava/lang/Void;
	public synthetic fun coreReset ()V
	protected fun coreUpdate ([B)Ljava/lang/Void;
	public synthetic fun coreUpdate ([B)V
	public abstract fun digestOut ([B)V
	public abstract fun reset ()Lkorlibs/crypto/Hasher;
	public abstract fun update ([BII)Lkorlibs/crypto/Hasher;
}

public final class korlibs/crypto/PBKDF2 {
	public static final field Companion Lkorlibs/crypto/PBKDF2$Companion;
	public fun <init> ()V
}

public final class korlibs/crypto/PBKDF2$Companion {
	public final fun pbkdf2 ([B[BIILkorlibs/crypto/Hasher;)Lkorlibs/crypto/Hash;
	public final fun pbkdf2WithHmacSHA1 ([B[BII)Lkorlibs/crypto/Hash;
	public final fun pbkdf2WithHmacSHA256 ([B[BII)Lkorlibs/crypto/Hash;
	public final fun pbkdf2WithHmacSHA512 ([B[BII)Lkorlibs/crypto/Hash;
}

public abstract class korlibs/crypto/SHA : korlibs/crypto/Hasher {
	public fun <init> (IILjava/lang/String;)V
	public synthetic fun <init> (IILjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	protected fun corePadding (J)[B
	protected final fun readS32_be ([BI)I
	protected final fun readU8 ([BI)I
}

public final class korlibs/crypto/SHA1 : korlibs/crypto/SHA {
	public static final field Companion Lkorlibs/crypto/SHA1$Companion;
	public fun <init> ()V
}

public final class korlibs/crypto/SHA1$Companion : korlibs/crypto/HasherFactory {
}

public final class korlibs/crypto/SHA1Kt {
	public static final fun sha1 ([B)Lkorlibs/crypto/Hash;
}

public final class korlibs/crypto/SHA256 : korlibs/crypto/SHA {
	public static final field Companion Lkorlibs/crypto/SHA256$Companion;
	public fun <init> ()V
}

public final class korlibs/crypto/SHA256$Companion : korlibs/crypto/HasherFactory {
}

public final class korlibs/crypto/SHA256Kt {
	public static final fun sha256 ([B)Lkorlibs/crypto/Hash;
}

public final class korlibs/crypto/SHA512 : korlibs/crypto/SHA {
	public static final field Companion Lkorlibs/crypto/SHA512$Companion;
	public fun <init> ()V
	public fun digestOut ([B)V
	public final fun getBuf-TcUX1vc ()[B
	public final fun getH-Y2RjT0g ()[J
	public final fun getLen-s-VKNKU ()J
	public final fun setLen-VKZWuLQ (J)V
	public fun update ([BII)Lkorlibs/crypto/Hasher;
}

public final class korlibs/crypto/SHA512$Companion : korlibs/crypto/HasherFactory {
}

public final class korlibs/crypto/SHA512Kt {
	public static final fun sha512 ([B)Lkorlibs/crypto/Hash;
}

public final class korlibs/crypto/SecureRandom : kotlin/random/Random {
	public static final field INSTANCE Lkorlibs/crypto/SecureRandom;
	public final fun addSeed ([B)V
	public fun nextBits (I)I
	public fun nextBytes ([BII)[B
}

public final class korlibs/crypto/SecureRandomJvmKt {
	public static final fun fillRandomBytes ([B)V
	public static final fun seedExtraRandomBytes ([B)V
}

